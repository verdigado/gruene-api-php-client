<?php
/**
 * CampaignsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Verdigado\Gruen eApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gruene API
 *
 * ## OpenAPI Endpoints <a href=\"/api-json\">OpenAPI Spec in JSON</a><br> <a href=\"/api-yaml\">OpenAPI Spec in YAML</a><br>  ### Offboarding Every service conntected to GrÃ¼nes Netz needs to remove users when they are removed from `saml.gruene.de`. Connected services need to pull a list of users waiting for removal at least once a week. api.gruene.de needs to be informed whether the user did not exist or was removed. API tokens can be obtained from `technik@verdigado.com`.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Verdigado\Gruen eApiClient\apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Verdigado\Gruen eApiClient\ApiException;
use Verdigado\Gruen eApiClient\Configuration;
use Verdigado\Gruen eApiClient\HeaderSelector;
use Verdigado\Gruen eApiClient\ObjectSerializer;

/**
 * CampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  Verdigado\Gruen eApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addPoiPhoto' => [
            'multipart/form-data',
        ],
        'createArea' => [
            'application/json',
        ],
        'createExperienceArea' => [
            'application/json',
        ],
        'createFocusArea' => [
            'application/json',
        ],
        'createPoi' => [
            'application/json',
        ],
        'deleteArea' => [
            'application/json',
        ],
        'deleteExperienceArea' => [
            'application/json',
        ],
        'deleteFocusArea' => [
            'application/json',
        ],
        'deletePoi' => [
            'application/json',
        ],
        'deletePoiPhoto' => [
            'application/json',
        ],
        'findAreas' => [
            'application/json',
        ],
        'findExperienceAreas' => [
            'application/json',
        ],
        'findFocusAreas' => [
            'application/json',
        ],
        'findOwnAreas' => [
            'application/json',
        ],
        'findOwnPois' => [
            'application/json',
        ],
        'findPois' => [
            'application/json',
        ],
        'getArea' => [
            'application/json',
        ],
        'getExperienceArea' => [
            'application/json',
        ],
        'getFocusArea' => [
            'application/json',
        ],
        'getPoi' => [
            'application/json',
        ],
        'updateArea' => [
            'application/json',
        ],
        'updateExperienceArea' => [
            'application/json',
        ],
        'updateFocusArea' => [
            'application/json',
        ],
        'updatePoi' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addPoiPhoto
     *
     * Add POI photo
     *
     * @param  string $poi_id poi_id (required)
     * @param  \SplFileObject $image image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPoiPhoto'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Poi
     */
    public function addPoiPhoto($poi_id, $image, string $contentType = self::contentTypes['addPoiPhoto'][0])
    {
        list($response) = $this->addPoiPhotoWithHttpInfo($poi_id, $image, $contentType);
        return $response;
    }

    /**
     * Operation addPoiPhotoWithHttpInfo
     *
     * Add POI photo
     *
     * @param  string $poi_id (required)
     * @param  \SplFileObject $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPoiPhoto'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Poi, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPoiPhotoWithHttpInfo($poi_id, $image, string $contentType = self::contentTypes['addPoiPhoto'][0])
    {
        $request = $this->addPoiPhotoRequest($poi_id, $image, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Verdigado\Gruen eApiClient\models\Poi' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Poi' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Poi', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Poi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPoiPhotoAsync
     *
     * Add POI photo
     *
     * @param  string $poi_id (required)
     * @param  \SplFileObject $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPoiPhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPoiPhotoAsync($poi_id, $image, string $contentType = self::contentTypes['addPoiPhoto'][0])
    {
        return $this->addPoiPhotoAsyncWithHttpInfo($poi_id, $image, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPoiPhotoAsyncWithHttpInfo
     *
     * Add POI photo
     *
     * @param  string $poi_id (required)
     * @param  \SplFileObject $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPoiPhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPoiPhotoAsyncWithHttpInfo($poi_id, $image, string $contentType = self::contentTypes['addPoiPhoto'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
        $request = $this->addPoiPhotoRequest($poi_id, $image, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPoiPhoto'
     *
     * @param  string $poi_id (required)
     * @param  \SplFileObject $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPoiPhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPoiPhotoRequest($poi_id, $image, string $contentType = self::contentTypes['addPoiPhoto'][0])
    {

        // verify the required parameter 'poi_id' is set
        if ($poi_id === null || (is_array($poi_id) && count($poi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poi_id when calling addPoiPhoto'
            );
        }

        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling addPoiPhoto'
            );
        }


        $resourcePath = '/v1/campaigns/pois/{poiId}/photos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($poi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poiId' . '}',
                ObjectSerializer::toPathValue($poi_id),
                $resourcePath
            );
        }

        // form params
        if ($image !== null) {
            $multipart = true;
            $formParams['image'] = [];
            $paramFiles = is_array($image) ? $image : [$image];
            foreach ($paramFiles as $paramFile) {
                $formParams['image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createArea
     *
     * Create a new Area
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateArea $create_area create_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Area
     */
    public function createArea($create_area, string $contentType = self::contentTypes['createArea'][0])
    {
        list($response) = $this->createAreaWithHttpInfo($create_area, $contentType);
        return $response;
    }

    /**
     * Operation createAreaWithHttpInfo
     *
     * Create a new Area
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateArea $create_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Area, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAreaWithHttpInfo($create_area, string $contentType = self::contentTypes['createArea'][0])
    {
        $request = $this->createAreaRequest($create_area, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Verdigado\Gruen eApiClient\models\Area' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Area' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Area', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Area';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Area',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAreaAsync
     *
     * Create a new Area
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateArea $create_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAreaAsync($create_area, string $contentType = self::contentTypes['createArea'][0])
    {
        return $this->createAreaAsyncWithHttpInfo($create_area, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAreaAsyncWithHttpInfo
     *
     * Create a new Area
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateArea $create_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAreaAsyncWithHttpInfo($create_area, string $contentType = self::contentTypes['createArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Area';
        $request = $this->createAreaRequest($create_area, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createArea'
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateArea $create_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAreaRequest($create_area, string $contentType = self::contentTypes['createArea'][0])
    {

        // verify the required parameter 'create_area' is set
        if ($create_area === null || (is_array($create_area) && count($create_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_area when calling createArea'
            );
        }


        $resourcePath = '/v1/campaigns/areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_area)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_area));
            } else {
                $httpBody = $create_area;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createExperienceArea
     *
     * Create a new ExperienceArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateExperienceArea $create_experience_area create_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\ExperienceArea
     */
    public function createExperienceArea($create_experience_area, string $contentType = self::contentTypes['createExperienceArea'][0])
    {
        list($response) = $this->createExperienceAreaWithHttpInfo($create_experience_area, $contentType);
        return $response;
    }

    /**
     * Operation createExperienceAreaWithHttpInfo
     *
     * Create a new ExperienceArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateExperienceArea $create_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\ExperienceArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function createExperienceAreaWithHttpInfo($create_experience_area, string $contentType = self::contentTypes['createExperienceArea'][0])
    {
        $request = $this->createExperienceAreaRequest($create_experience_area, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\ExperienceArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\ExperienceArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createExperienceAreaAsync
     *
     * Create a new ExperienceArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateExperienceArea $create_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExperienceAreaAsync($create_experience_area, string $contentType = self::contentTypes['createExperienceArea'][0])
    {
        return $this->createExperienceAreaAsyncWithHttpInfo($create_experience_area, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createExperienceAreaAsyncWithHttpInfo
     *
     * Create a new ExperienceArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateExperienceArea $create_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExperienceAreaAsyncWithHttpInfo($create_experience_area, string $contentType = self::contentTypes['createExperienceArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
        $request = $this->createExperienceAreaRequest($create_experience_area, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createExperienceArea'
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateExperienceArea $create_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createExperienceAreaRequest($create_experience_area, string $contentType = self::contentTypes['createExperienceArea'][0])
    {

        // verify the required parameter 'create_experience_area' is set
        if ($create_experience_area === null || (is_array($create_experience_area) && count($create_experience_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_experience_area when calling createExperienceArea'
            );
        }


        $resourcePath = '/v1/campaigns/experience-areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_experience_area)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_experience_area));
            } else {
                $httpBody = $create_experience_area;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFocusArea
     *
     * Create a new FocusArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateFocusArea $create_focus_area create_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FocusArea
     */
    public function createFocusArea($create_focus_area, string $contentType = self::contentTypes['createFocusArea'][0])
    {
        list($response) = $this->createFocusAreaWithHttpInfo($create_focus_area, $contentType);
        return $response;
    }

    /**
     * Operation createFocusAreaWithHttpInfo
     *
     * Create a new FocusArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateFocusArea $create_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FocusArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFocusAreaWithHttpInfo($create_focus_area, string $contentType = self::contentTypes['createFocusArea'][0])
    {
        $request = $this->createFocusAreaRequest($create_focus_area, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Verdigado\Gruen eApiClient\models\FocusArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FocusArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FocusArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FocusArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFocusAreaAsync
     *
     * Create a new FocusArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateFocusArea $create_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFocusAreaAsync($create_focus_area, string $contentType = self::contentTypes['createFocusArea'][0])
    {
        return $this->createFocusAreaAsyncWithHttpInfo($create_focus_area, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFocusAreaAsyncWithHttpInfo
     *
     * Create a new FocusArea
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateFocusArea $create_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFocusAreaAsyncWithHttpInfo($create_focus_area, string $contentType = self::contentTypes['createFocusArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
        $request = $this->createFocusAreaRequest($create_focus_area, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFocusArea'
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreateFocusArea $create_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFocusAreaRequest($create_focus_area, string $contentType = self::contentTypes['createFocusArea'][0])
    {

        // verify the required parameter 'create_focus_area' is set
        if ($create_focus_area === null || (is_array($create_focus_area) && count($create_focus_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_focus_area when calling createFocusArea'
            );
        }


        $resourcePath = '/v1/campaigns/focus-areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_focus_area)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_focus_area));
            } else {
                $httpBody = $create_focus_area;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPoi
     *
     * Create a new POI
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreatePoi $create_poi create_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Poi
     */
    public function createPoi($create_poi, string $contentType = self::contentTypes['createPoi'][0])
    {
        list($response) = $this->createPoiWithHttpInfo($create_poi, $contentType);
        return $response;
    }

    /**
     * Operation createPoiWithHttpInfo
     *
     * Create a new POI
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreatePoi $create_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Poi, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPoiWithHttpInfo($create_poi, string $contentType = self::contentTypes['createPoi'][0])
    {
        $request = $this->createPoiRequest($create_poi, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Verdigado\Gruen eApiClient\models\Poi' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Poi' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Poi', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Poi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPoiAsync
     *
     * Create a new POI
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreatePoi $create_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPoiAsync($create_poi, string $contentType = self::contentTypes['createPoi'][0])
    {
        return $this->createPoiAsyncWithHttpInfo($create_poi, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPoiAsyncWithHttpInfo
     *
     * Create a new POI
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreatePoi $create_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPoiAsyncWithHttpInfo($create_poi, string $contentType = self::contentTypes['createPoi'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
        $request = $this->createPoiRequest($create_poi, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPoi'
     *
     * @param  \Verdigado\Gruen eApiClient\models\CreatePoi $create_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPoiRequest($create_poi, string $contentType = self::contentTypes['createPoi'][0])
    {

        // verify the required parameter 'create_poi' is set
        if ($create_poi === null || (is_array($create_poi) && count($create_poi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_poi when calling createPoi'
            );
        }


        $resourcePath = '/v1/campaigns/pois';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_poi)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_poi));
            } else {
                $httpBody = $create_poi;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteArea
     *
     * Delete an Area
     *
     * @param  string $area_id area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Area
     */
    public function deleteArea($area_id, string $contentType = self::contentTypes['deleteArea'][0])
    {
        list($response) = $this->deleteAreaWithHttpInfo($area_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteAreaWithHttpInfo
     *
     * Delete an Area
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Area, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAreaWithHttpInfo($area_id, string $contentType = self::contentTypes['deleteArea'][0])
    {
        $request = $this->deleteAreaRequest($area_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Area' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Area' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Area', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Area';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Area',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAreaAsync
     *
     * Delete an Area
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAreaAsync($area_id, string $contentType = self::contentTypes['deleteArea'][0])
    {
        return $this->deleteAreaAsyncWithHttpInfo($area_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAreaAsyncWithHttpInfo
     *
     * Delete an Area
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAreaAsyncWithHttpInfo($area_id, string $contentType = self::contentTypes['deleteArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Area';
        $request = $this->deleteAreaRequest($area_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteArea'
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAreaRequest($area_id, string $contentType = self::contentTypes['deleteArea'][0])
    {

        // verify the required parameter 'area_id' is set
        if ($area_id === null || (is_array($area_id) && count($area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area_id when calling deleteArea'
            );
        }


        $resourcePath = '/v1/campaigns/areas/{areaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'areaId' . '}',
                ObjectSerializer::toPathValue($area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExperienceArea
     *
     * Delete a ExperienceArea
     *
     * @param  string $experience_area_id experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\ExperienceArea
     */
    public function deleteExperienceArea($experience_area_id, string $contentType = self::contentTypes['deleteExperienceArea'][0])
    {
        list($response) = $this->deleteExperienceAreaWithHttpInfo($experience_area_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteExperienceAreaWithHttpInfo
     *
     * Delete a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\ExperienceArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExperienceAreaWithHttpInfo($experience_area_id, string $contentType = self::contentTypes['deleteExperienceArea'][0])
    {
        $request = $this->deleteExperienceAreaRequest($experience_area_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\ExperienceArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\ExperienceArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExperienceAreaAsync
     *
     * Delete a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExperienceAreaAsync($experience_area_id, string $contentType = self::contentTypes['deleteExperienceArea'][0])
    {
        return $this->deleteExperienceAreaAsyncWithHttpInfo($experience_area_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExperienceAreaAsyncWithHttpInfo
     *
     * Delete a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExperienceAreaAsyncWithHttpInfo($experience_area_id, string $contentType = self::contentTypes['deleteExperienceArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
        $request = $this->deleteExperienceAreaRequest($experience_area_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExperienceArea'
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteExperienceAreaRequest($experience_area_id, string $contentType = self::contentTypes['deleteExperienceArea'][0])
    {

        // verify the required parameter 'experience_area_id' is set
        if ($experience_area_id === null || (is_array($experience_area_id) && count($experience_area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $experience_area_id when calling deleteExperienceArea'
            );
        }


        $resourcePath = '/v1/campaigns/experience-areas/{experienceAreaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($experience_area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'experienceAreaId' . '}',
                ObjectSerializer::toPathValue($experience_area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFocusArea
     *
     * Delete a FocusArea
     *
     * @param  string $focus_area_id focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FocusArea
     */
    public function deleteFocusArea($focus_area_id, string $contentType = self::contentTypes['deleteFocusArea'][0])
    {
        list($response) = $this->deleteFocusAreaWithHttpInfo($focus_area_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteFocusAreaWithHttpInfo
     *
     * Delete a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FocusArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFocusAreaWithHttpInfo($focus_area_id, string $contentType = self::contentTypes['deleteFocusArea'][0])
    {
        $request = $this->deleteFocusAreaRequest($focus_area_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FocusArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FocusArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FocusArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FocusArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFocusAreaAsync
     *
     * Delete a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFocusAreaAsync($focus_area_id, string $contentType = self::contentTypes['deleteFocusArea'][0])
    {
        return $this->deleteFocusAreaAsyncWithHttpInfo($focus_area_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFocusAreaAsyncWithHttpInfo
     *
     * Delete a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFocusAreaAsyncWithHttpInfo($focus_area_id, string $contentType = self::contentTypes['deleteFocusArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
        $request = $this->deleteFocusAreaRequest($focus_area_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFocusArea'
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFocusAreaRequest($focus_area_id, string $contentType = self::contentTypes['deleteFocusArea'][0])
    {

        // verify the required parameter 'focus_area_id' is set
        if ($focus_area_id === null || (is_array($focus_area_id) && count($focus_area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $focus_area_id when calling deleteFocusArea'
            );
        }


        $resourcePath = '/v1/campaigns/focus-areas/{focusAreaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($focus_area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'focusAreaId' . '}',
                ObjectSerializer::toPathValue($focus_area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePoi
     *
     * Delete a POI
     *
     * @param  string $poi_id poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Poi
     */
    public function deletePoi($poi_id, string $contentType = self::contentTypes['deletePoi'][0])
    {
        list($response) = $this->deletePoiWithHttpInfo($poi_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePoiWithHttpInfo
     *
     * Delete a POI
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Poi, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePoiWithHttpInfo($poi_id, string $contentType = self::contentTypes['deletePoi'][0])
    {
        $request = $this->deletePoiRequest($poi_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Poi' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Poi' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Poi', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Poi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePoiAsync
     *
     * Delete a POI
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePoiAsync($poi_id, string $contentType = self::contentTypes['deletePoi'][0])
    {
        return $this->deletePoiAsyncWithHttpInfo($poi_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePoiAsyncWithHttpInfo
     *
     * Delete a POI
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePoiAsyncWithHttpInfo($poi_id, string $contentType = self::contentTypes['deletePoi'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
        $request = $this->deletePoiRequest($poi_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePoi'
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePoiRequest($poi_id, string $contentType = self::contentTypes['deletePoi'][0])
    {

        // verify the required parameter 'poi_id' is set
        if ($poi_id === null || (is_array($poi_id) && count($poi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poi_id when calling deletePoi'
            );
        }


        $resourcePath = '/v1/campaigns/pois/{poiId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($poi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poiId' . '}',
                ObjectSerializer::toPathValue($poi_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePoiPhoto
     *
     * Delete a POI Photo
     *
     * @param  string $poi_id poi_id (required)
     * @param  string $photo_id photo_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoiPhoto'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Poi
     */
    public function deletePoiPhoto($poi_id, $photo_id, string $contentType = self::contentTypes['deletePoiPhoto'][0])
    {
        list($response) = $this->deletePoiPhotoWithHttpInfo($poi_id, $photo_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePoiPhotoWithHttpInfo
     *
     * Delete a POI Photo
     *
     * @param  string $poi_id (required)
     * @param  string $photo_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoiPhoto'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Poi, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePoiPhotoWithHttpInfo($poi_id, $photo_id, string $contentType = self::contentTypes['deletePoiPhoto'][0])
    {
        $request = $this->deletePoiPhotoRequest($poi_id, $photo_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Poi' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Poi' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Poi', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Poi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePoiPhotoAsync
     *
     * Delete a POI Photo
     *
     * @param  string $poi_id (required)
     * @param  string $photo_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoiPhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePoiPhotoAsync($poi_id, $photo_id, string $contentType = self::contentTypes['deletePoiPhoto'][0])
    {
        return $this->deletePoiPhotoAsyncWithHttpInfo($poi_id, $photo_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePoiPhotoAsyncWithHttpInfo
     *
     * Delete a POI Photo
     *
     * @param  string $poi_id (required)
     * @param  string $photo_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoiPhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePoiPhotoAsyncWithHttpInfo($poi_id, $photo_id, string $contentType = self::contentTypes['deletePoiPhoto'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
        $request = $this->deletePoiPhotoRequest($poi_id, $photo_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePoiPhoto'
     *
     * @param  string $poi_id (required)
     * @param  string $photo_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePoiPhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePoiPhotoRequest($poi_id, $photo_id, string $contentType = self::contentTypes['deletePoiPhoto'][0])
    {

        // verify the required parameter 'poi_id' is set
        if ($poi_id === null || (is_array($poi_id) && count($poi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poi_id when calling deletePoiPhoto'
            );
        }

        // verify the required parameter 'photo_id' is set
        if ($photo_id === null || (is_array($photo_id) && count($photo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $photo_id when calling deletePoiPhoto'
            );
        }


        $resourcePath = '/v1/campaigns/pois/{poiId}/photos/{photoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($poi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poiId' . '}',
                ObjectSerializer::toPathValue($poi_id),
                $resourcePath
            );
        }
        // path params
        if ($photo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'photoId' . '}',
                ObjectSerializer::toPathValue($photo_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAreas
     *
     * Find Areas
     *
     * @param  string $bbox bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FindAreasResponse
     */
    public function findAreas($bbox = null, string $contentType = self::contentTypes['findAreas'][0])
    {
        list($response) = $this->findAreasWithHttpInfo($bbox, $contentType);
        return $response;
    }

    /**
     * Operation findAreasWithHttpInfo
     *
     * Find Areas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FindAreasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAreasWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findAreas'][0])
    {
        $request = $this->findAreasRequest($bbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FindAreasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FindAreasResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FindAreasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FindAreasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FindAreasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAreasAsync
     *
     * Find Areas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAreasAsync($bbox = null, string $contentType = self::contentTypes['findAreas'][0])
    {
        return $this->findAreasAsyncWithHttpInfo($bbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAreasAsyncWithHttpInfo
     *
     * Find Areas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAreasAsyncWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findAreas'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FindAreasResponse';
        $request = $this->findAreasRequest($bbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAreas'
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAreasRequest($bbox = null, string $contentType = self::contentTypes['findAreas'][0])
    {



        $resourcePath = '/v1/campaigns/areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbox,
            'bbox', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findExperienceAreas
     *
     * Find ExperienceAreas
     *
     * @param  string $bbox bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findExperienceAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse
     */
    public function findExperienceAreas($bbox = null, string $contentType = self::contentTypes['findExperienceAreas'][0])
    {
        list($response) = $this->findExperienceAreasWithHttpInfo($bbox, $contentType);
        return $response;
    }

    /**
     * Operation findExperienceAreasWithHttpInfo
     *
     * Find ExperienceAreas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findExperienceAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findExperienceAreasWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findExperienceAreas'][0])
    {
        $request = $this->findExperienceAreasRequest($bbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findExperienceAreasAsync
     *
     * Find ExperienceAreas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findExperienceAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findExperienceAreasAsync($bbox = null, string $contentType = self::contentTypes['findExperienceAreas'][0])
    {
        return $this->findExperienceAreasAsyncWithHttpInfo($bbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findExperienceAreasAsyncWithHttpInfo
     *
     * Find ExperienceAreas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findExperienceAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findExperienceAreasAsyncWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findExperienceAreas'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FindExperienceAreasResponse';
        $request = $this->findExperienceAreasRequest($bbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findExperienceAreas'
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findExperienceAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findExperienceAreasRequest($bbox = null, string $contentType = self::contentTypes['findExperienceAreas'][0])
    {



        $resourcePath = '/v1/campaigns/experience-areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbox,
            'bbox', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findFocusAreas
     *
     * Find FocusAreas
     *
     * @param  string $bbox bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFocusAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FindFocusAreasResponse
     */
    public function findFocusAreas($bbox = null, string $contentType = self::contentTypes['findFocusAreas'][0])
    {
        list($response) = $this->findFocusAreasWithHttpInfo($bbox, $contentType);
        return $response;
    }

    /**
     * Operation findFocusAreasWithHttpInfo
     *
     * Find FocusAreas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFocusAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FindFocusAreasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findFocusAreasWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findFocusAreas'][0])
    {
        $request = $this->findFocusAreasRequest($bbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FindFocusAreasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FindFocusAreasResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FindFocusAreasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FindFocusAreasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FindFocusAreasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findFocusAreasAsync
     *
     * Find FocusAreas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFocusAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findFocusAreasAsync($bbox = null, string $contentType = self::contentTypes['findFocusAreas'][0])
    {
        return $this->findFocusAreasAsyncWithHttpInfo($bbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findFocusAreasAsyncWithHttpInfo
     *
     * Find FocusAreas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFocusAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findFocusAreasAsyncWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findFocusAreas'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FindFocusAreasResponse';
        $request = $this->findFocusAreasRequest($bbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findFocusAreas'
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFocusAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findFocusAreasRequest($bbox = null, string $contentType = self::contentTypes['findFocusAreas'][0])
    {



        $resourcePath = '/v1/campaigns/focus-areas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbox,
            'bbox', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findOwnAreas
     *
     * Find own Areas
     *
     * @param  string $bbox bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FindAreasResponse
     */
    public function findOwnAreas($bbox = null, string $contentType = self::contentTypes['findOwnAreas'][0])
    {
        list($response) = $this->findOwnAreasWithHttpInfo($bbox, $contentType);
        return $response;
    }

    /**
     * Operation findOwnAreasWithHttpInfo
     *
     * Find own Areas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnAreas'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FindAreasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findOwnAreasWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findOwnAreas'][0])
    {
        $request = $this->findOwnAreasRequest($bbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FindAreasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FindAreasResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FindAreasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FindAreasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FindAreasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findOwnAreasAsync
     *
     * Find own Areas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOwnAreasAsync($bbox = null, string $contentType = self::contentTypes['findOwnAreas'][0])
    {
        return $this->findOwnAreasAsyncWithHttpInfo($bbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findOwnAreasAsyncWithHttpInfo
     *
     * Find own Areas
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOwnAreasAsyncWithHttpInfo($bbox = null, string $contentType = self::contentTypes['findOwnAreas'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FindAreasResponse';
        $request = $this->findOwnAreasRequest($bbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findOwnAreas'
     *
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnAreas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findOwnAreasRequest($bbox = null, string $contentType = self::contentTypes['findOwnAreas'][0])
    {



        $resourcePath = '/v1/campaigns/areas/self';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbox,
            'bbox', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findOwnPois
     *
     * Find own POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnPois'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FindPoisResponse
     */
    public function findOwnPois($type = null, $bbox = null, string $contentType = self::contentTypes['findOwnPois'][0])
    {
        list($response) = $this->findOwnPoisWithHttpInfo($type, $bbox, $contentType);
        return $response;
    }

    /**
     * Operation findOwnPoisWithHttpInfo
     *
     * Find own POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnPois'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FindPoisResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findOwnPoisWithHttpInfo($type = null, $bbox = null, string $contentType = self::contentTypes['findOwnPois'][0])
    {
        $request = $this->findOwnPoisRequest($type, $bbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FindPoisResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FindPoisResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FindPoisResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FindPoisResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FindPoisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findOwnPoisAsync
     *
     * Find own POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnPois'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOwnPoisAsync($type = null, $bbox = null, string $contentType = self::contentTypes['findOwnPois'][0])
    {
        return $this->findOwnPoisAsyncWithHttpInfo($type, $bbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findOwnPoisAsyncWithHttpInfo
     *
     * Find own POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnPois'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOwnPoisAsyncWithHttpInfo($type = null, $bbox = null, string $contentType = self::contentTypes['findOwnPois'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FindPoisResponse';
        $request = $this->findOwnPoisRequest($type, $bbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findOwnPois'
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOwnPois'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findOwnPoisRequest($type = null, $bbox = null, string $contentType = self::contentTypes['findOwnPois'][0])
    {




        $resourcePath = '/v1/campaigns/pois/self';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbox,
            'bbox', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findPois
     *
     * Find POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPois'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FindPoisResponse
     */
    public function findPois($type = null, $bbox = null, string $contentType = self::contentTypes['findPois'][0])
    {
        list($response) = $this->findPoisWithHttpInfo($type, $bbox, $contentType);
        return $response;
    }

    /**
     * Operation findPoisWithHttpInfo
     *
     * Find POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPois'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FindPoisResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findPoisWithHttpInfo($type = null, $bbox = null, string $contentType = self::contentTypes['findPois'][0])
    {
        $request = $this->findPoisRequest($type, $bbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FindPoisResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FindPoisResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FindPoisResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FindPoisResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FindPoisResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findPoisAsync
     *
     * Find POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPois'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPoisAsync($type = null, $bbox = null, string $contentType = self::contentTypes['findPois'][0])
    {
        return $this->findPoisAsyncWithHttpInfo($type, $bbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findPoisAsyncWithHttpInfo
     *
     * Find POIs
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPois'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPoisAsyncWithHttpInfo($type = null, $bbox = null, string $contentType = self::contentTypes['findPois'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FindPoisResponse';
        $request = $this->findPoisRequest($type, $bbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findPois'
     *
     * @param  string $type filter by POI type (optional)
     * @param  string $bbox (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPois'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findPoisRequest($type = null, $bbox = null, string $contentType = self::contentTypes['findPois'][0])
    {




        $resourcePath = '/v1/campaigns/pois';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bbox,
            'bbox', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArea
     *
     * Get an Area
     *
     * @param  string $area_id area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Area
     */
    public function getArea($area_id, string $contentType = self::contentTypes['getArea'][0])
    {
        list($response) = $this->getAreaWithHttpInfo($area_id, $contentType);
        return $response;
    }

    /**
     * Operation getAreaWithHttpInfo
     *
     * Get an Area
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Area, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAreaWithHttpInfo($area_id, string $contentType = self::contentTypes['getArea'][0])
    {
        $request = $this->getAreaRequest($area_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Area' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Area' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Area', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Area';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Area',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAreaAsync
     *
     * Get an Area
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAreaAsync($area_id, string $contentType = self::contentTypes['getArea'][0])
    {
        return $this->getAreaAsyncWithHttpInfo($area_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAreaAsyncWithHttpInfo
     *
     * Get an Area
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAreaAsyncWithHttpInfo($area_id, string $contentType = self::contentTypes['getArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Area';
        $request = $this->getAreaRequest($area_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArea'
     *
     * @param  string $area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAreaRequest($area_id, string $contentType = self::contentTypes['getArea'][0])
    {

        // verify the required parameter 'area_id' is set
        if ($area_id === null || (is_array($area_id) && count($area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area_id when calling getArea'
            );
        }


        $resourcePath = '/v1/campaigns/areas/{areaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'areaId' . '}',
                ObjectSerializer::toPathValue($area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExperienceArea
     *
     * Get a ExperienceArea
     *
     * @param  string $experience_area_id experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\ExperienceArea
     */
    public function getExperienceArea($experience_area_id, string $contentType = self::contentTypes['getExperienceArea'][0])
    {
        list($response) = $this->getExperienceAreaWithHttpInfo($experience_area_id, $contentType);
        return $response;
    }

    /**
     * Operation getExperienceAreaWithHttpInfo
     *
     * Get a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\ExperienceArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExperienceAreaWithHttpInfo($experience_area_id, string $contentType = self::contentTypes['getExperienceArea'][0])
    {
        $request = $this->getExperienceAreaRequest($experience_area_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\ExperienceArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\ExperienceArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExperienceAreaAsync
     *
     * Get a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExperienceAreaAsync($experience_area_id, string $contentType = self::contentTypes['getExperienceArea'][0])
    {
        return $this->getExperienceAreaAsyncWithHttpInfo($experience_area_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExperienceAreaAsyncWithHttpInfo
     *
     * Get a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExperienceAreaAsyncWithHttpInfo($experience_area_id, string $contentType = self::contentTypes['getExperienceArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
        $request = $this->getExperienceAreaRequest($experience_area_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExperienceArea'
     *
     * @param  string $experience_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExperienceAreaRequest($experience_area_id, string $contentType = self::contentTypes['getExperienceArea'][0])
    {

        // verify the required parameter 'experience_area_id' is set
        if ($experience_area_id === null || (is_array($experience_area_id) && count($experience_area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $experience_area_id when calling getExperienceArea'
            );
        }


        $resourcePath = '/v1/campaigns/experience-areas/{experienceAreaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($experience_area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'experienceAreaId' . '}',
                ObjectSerializer::toPathValue($experience_area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFocusArea
     *
     * Get a FocusArea
     *
     * @param  string $focus_area_id focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FocusArea
     */
    public function getFocusArea($focus_area_id, string $contentType = self::contentTypes['getFocusArea'][0])
    {
        list($response) = $this->getFocusAreaWithHttpInfo($focus_area_id, $contentType);
        return $response;
    }

    /**
     * Operation getFocusAreaWithHttpInfo
     *
     * Get a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FocusArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFocusAreaWithHttpInfo($focus_area_id, string $contentType = self::contentTypes['getFocusArea'][0])
    {
        $request = $this->getFocusAreaRequest($focus_area_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FocusArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FocusArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FocusArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FocusArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFocusAreaAsync
     *
     * Get a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFocusAreaAsync($focus_area_id, string $contentType = self::contentTypes['getFocusArea'][0])
    {
        return $this->getFocusAreaAsyncWithHttpInfo($focus_area_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFocusAreaAsyncWithHttpInfo
     *
     * Get a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFocusAreaAsyncWithHttpInfo($focus_area_id, string $contentType = self::contentTypes['getFocusArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
        $request = $this->getFocusAreaRequest($focus_area_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFocusArea'
     *
     * @param  string $focus_area_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFocusAreaRequest($focus_area_id, string $contentType = self::contentTypes['getFocusArea'][0])
    {

        // verify the required parameter 'focus_area_id' is set
        if ($focus_area_id === null || (is_array($focus_area_id) && count($focus_area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $focus_area_id when calling getFocusArea'
            );
        }


        $resourcePath = '/v1/campaigns/focus-areas/{focusAreaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($focus_area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'focusAreaId' . '}',
                ObjectSerializer::toPathValue($focus_area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPoi
     *
     * Get a POI
     *
     * @param  string $poi_id poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Poi
     */
    public function getPoi($poi_id, string $contentType = self::contentTypes['getPoi'][0])
    {
        list($response) = $this->getPoiWithHttpInfo($poi_id, $contentType);
        return $response;
    }

    /**
     * Operation getPoiWithHttpInfo
     *
     * Get a POI
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Poi, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPoiWithHttpInfo($poi_id, string $contentType = self::contentTypes['getPoi'][0])
    {
        $request = $this->getPoiRequest($poi_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Poi' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Poi' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Poi', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Poi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPoiAsync
     *
     * Get a POI
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPoiAsync($poi_id, string $contentType = self::contentTypes['getPoi'][0])
    {
        return $this->getPoiAsyncWithHttpInfo($poi_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPoiAsyncWithHttpInfo
     *
     * Get a POI
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPoiAsyncWithHttpInfo($poi_id, string $contentType = self::contentTypes['getPoi'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
        $request = $this->getPoiRequest($poi_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPoi'
     *
     * @param  string $poi_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPoiRequest($poi_id, string $contentType = self::contentTypes['getPoi'][0])
    {

        // verify the required parameter 'poi_id' is set
        if ($poi_id === null || (is_array($poi_id) && count($poi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poi_id when calling getPoi'
            );
        }


        $resourcePath = '/v1/campaigns/pois/{poiId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($poi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poiId' . '}',
                ObjectSerializer::toPathValue($poi_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateArea
     *
     * Update an Area
     *
     * @param  string $area_id area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateArea $update_area update_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Area
     */
    public function updateArea($area_id, $update_area, string $contentType = self::contentTypes['updateArea'][0])
    {
        list($response) = $this->updateAreaWithHttpInfo($area_id, $update_area, $contentType);
        return $response;
    }

    /**
     * Operation updateAreaWithHttpInfo
     *
     * Update an Area
     *
     * @param  string $area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateArea $update_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Area, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAreaWithHttpInfo($area_id, $update_area, string $contentType = self::contentTypes['updateArea'][0])
    {
        $request = $this->updateAreaRequest($area_id, $update_area, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Area' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Area' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Area', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Area';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Area',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAreaAsync
     *
     * Update an Area
     *
     * @param  string $area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateArea $update_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAreaAsync($area_id, $update_area, string $contentType = self::contentTypes['updateArea'][0])
    {
        return $this->updateAreaAsyncWithHttpInfo($area_id, $update_area, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAreaAsyncWithHttpInfo
     *
     * Update an Area
     *
     * @param  string $area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateArea $update_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAreaAsyncWithHttpInfo($area_id, $update_area, string $contentType = self::contentTypes['updateArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Area';
        $request = $this->updateAreaRequest($area_id, $update_area, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateArea'
     *
     * @param  string $area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateArea $update_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAreaRequest($area_id, $update_area, string $contentType = self::contentTypes['updateArea'][0])
    {

        // verify the required parameter 'area_id' is set
        if ($area_id === null || (is_array($area_id) && count($area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $area_id when calling updateArea'
            );
        }

        // verify the required parameter 'update_area' is set
        if ($update_area === null || (is_array($update_area) && count($update_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_area when calling updateArea'
            );
        }


        $resourcePath = '/v1/campaigns/areas/{areaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'areaId' . '}',
                ObjectSerializer::toPathValue($area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_area)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_area));
            } else {
                $httpBody = $update_area;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExperienceArea
     *
     * Update a ExperienceArea
     *
     * @param  string $experience_area_id experience_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateExperienceArea $update_experience_area update_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\ExperienceArea
     */
    public function updateExperienceArea($experience_area_id, $update_experience_area, string $contentType = self::contentTypes['updateExperienceArea'][0])
    {
        list($response) = $this->updateExperienceAreaWithHttpInfo($experience_area_id, $update_experience_area, $contentType);
        return $response;
    }

    /**
     * Operation updateExperienceAreaWithHttpInfo
     *
     * Update a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateExperienceArea $update_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperienceArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\ExperienceArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExperienceAreaWithHttpInfo($experience_area_id, $update_experience_area, string $contentType = self::contentTypes['updateExperienceArea'][0])
    {
        $request = $this->updateExperienceAreaRequest($experience_area_id, $update_experience_area, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\ExperienceArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\ExperienceArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\ExperienceArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExperienceAreaAsync
     *
     * Update a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateExperienceArea $update_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExperienceAreaAsync($experience_area_id, $update_experience_area, string $contentType = self::contentTypes['updateExperienceArea'][0])
    {
        return $this->updateExperienceAreaAsyncWithHttpInfo($experience_area_id, $update_experience_area, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExperienceAreaAsyncWithHttpInfo
     *
     * Update a ExperienceArea
     *
     * @param  string $experience_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateExperienceArea $update_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExperienceAreaAsyncWithHttpInfo($experience_area_id, $update_experience_area, string $contentType = self::contentTypes['updateExperienceArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\ExperienceArea';
        $request = $this->updateExperienceAreaRequest($experience_area_id, $update_experience_area, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExperienceArea'
     *
     * @param  string $experience_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateExperienceArea $update_experience_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperienceArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExperienceAreaRequest($experience_area_id, $update_experience_area, string $contentType = self::contentTypes['updateExperienceArea'][0])
    {

        // verify the required parameter 'experience_area_id' is set
        if ($experience_area_id === null || (is_array($experience_area_id) && count($experience_area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $experience_area_id when calling updateExperienceArea'
            );
        }

        // verify the required parameter 'update_experience_area' is set
        if ($update_experience_area === null || (is_array($update_experience_area) && count($update_experience_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_experience_area when calling updateExperienceArea'
            );
        }


        $resourcePath = '/v1/campaigns/experience-areas/{experienceAreaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($experience_area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'experienceAreaId' . '}',
                ObjectSerializer::toPathValue($experience_area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_experience_area)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_experience_area));
            } else {
                $httpBody = $update_experience_area;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFocusArea
     *
     * Update a FocusArea
     *
     * @param  string $focus_area_id focus_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateFocusArea $update_focus_area update_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\FocusArea
     */
    public function updateFocusArea($focus_area_id, $update_focus_area, string $contentType = self::contentTypes['updateFocusArea'][0])
    {
        list($response) = $this->updateFocusAreaWithHttpInfo($focus_area_id, $update_focus_area, $contentType);
        return $response;
    }

    /**
     * Operation updateFocusAreaWithHttpInfo
     *
     * Update a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateFocusArea $update_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFocusArea'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\FocusArea, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFocusAreaWithHttpInfo($focus_area_id, $update_focus_area, string $contentType = self::contentTypes['updateFocusArea'][0])
    {
        $request = $this->updateFocusAreaRequest($focus_area_id, $update_focus_area, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\FocusArea' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\FocusArea' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\FocusArea', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\FocusArea',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFocusAreaAsync
     *
     * Update a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateFocusArea $update_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFocusAreaAsync($focus_area_id, $update_focus_area, string $contentType = self::contentTypes['updateFocusArea'][0])
    {
        return $this->updateFocusAreaAsyncWithHttpInfo($focus_area_id, $update_focus_area, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFocusAreaAsyncWithHttpInfo
     *
     * Update a FocusArea
     *
     * @param  string $focus_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateFocusArea $update_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFocusAreaAsyncWithHttpInfo($focus_area_id, $update_focus_area, string $contentType = self::contentTypes['updateFocusArea'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\FocusArea';
        $request = $this->updateFocusAreaRequest($focus_area_id, $update_focus_area, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFocusArea'
     *
     * @param  string $focus_area_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdateFocusArea $update_focus_area (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFocusArea'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFocusAreaRequest($focus_area_id, $update_focus_area, string $contentType = self::contentTypes['updateFocusArea'][0])
    {

        // verify the required parameter 'focus_area_id' is set
        if ($focus_area_id === null || (is_array($focus_area_id) && count($focus_area_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $focus_area_id when calling updateFocusArea'
            );
        }

        // verify the required parameter 'update_focus_area' is set
        if ($update_focus_area === null || (is_array($update_focus_area) && count($update_focus_area) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_focus_area when calling updateFocusArea'
            );
        }


        $resourcePath = '/v1/campaigns/focus-areas/{focusAreaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($focus_area_id !== null) {
            $resourcePath = str_replace(
                '{' . 'focusAreaId' . '}',
                ObjectSerializer::toPathValue($focus_area_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_focus_area)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_focus_area));
            } else {
                $httpBody = $update_focus_area;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePoi
     *
     * Update a POI
     *
     * @param  string $poi_id poi_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdatePoi $update_poi update_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Verdigado\Gruen eApiClient\models\Poi
     */
    public function updatePoi($poi_id, $update_poi, string $contentType = self::contentTypes['updatePoi'][0])
    {
        list($response) = $this->updatePoiWithHttpInfo($poi_id, $update_poi, $contentType);
        return $response;
    }

    /**
     * Operation updatePoiWithHttpInfo
     *
     * Update a POI
     *
     * @param  string $poi_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdatePoi $update_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePoi'] to see the possible values for this operation
     *
     * @throws \Verdigado\Gruen eApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Verdigado\Gruen eApiClient\models\Poi, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePoiWithHttpInfo($poi_id, $update_poi, string $contentType = self::contentTypes['updatePoi'][0])
    {
        $request = $this->updatePoiRequest($poi_id, $update_poi, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Verdigado\Gruen eApiClient\models\Poi' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Verdigado\Gruen eApiClient\models\Poi' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Verdigado\Gruen eApiClient\models\Poi', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Verdigado\Gruen eApiClient\models\Poi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePoiAsync
     *
     * Update a POI
     *
     * @param  string $poi_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdatePoi $update_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePoiAsync($poi_id, $update_poi, string $contentType = self::contentTypes['updatePoi'][0])
    {
        return $this->updatePoiAsyncWithHttpInfo($poi_id, $update_poi, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePoiAsyncWithHttpInfo
     *
     * Update a POI
     *
     * @param  string $poi_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdatePoi $update_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePoiAsyncWithHttpInfo($poi_id, $update_poi, string $contentType = self::contentTypes['updatePoi'][0])
    {
        $returnType = '\Verdigado\Gruen eApiClient\models\Poi';
        $request = $this->updatePoiRequest($poi_id, $update_poi, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePoi'
     *
     * @param  string $poi_id (required)
     * @param  \Verdigado\Gruen eApiClient\models\UpdatePoi $update_poi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePoi'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePoiRequest($poi_id, $update_poi, string $contentType = self::contentTypes['updatePoi'][0])
    {

        // verify the required parameter 'poi_id' is set
        if ($poi_id === null || (is_array($poi_id) && count($poi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $poi_id when calling updatePoi'
            );
        }

        // verify the required parameter 'update_poi' is set
        if ($update_poi === null || (is_array($update_poi) && count($update_poi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_poi when calling updatePoi'
            );
        }


        $resourcePath = '/v1/campaigns/pois/{poiId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($poi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'poiId' . '}',
                ObjectSerializer::toPathValue($poi_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_poi)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_poi));
            } else {
                $httpBody = $update_poi;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
