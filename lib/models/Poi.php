<?php
/**
 * Poi
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Verdigado\Gruen eApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gruene API
 *
 * ## OpenAPI Endpoints <a href=\"/api-json\">OpenAPI Spec in JSON</a><br> <a href=\"/api-yaml\">OpenAPI Spec in YAML</a><br>  ### Offboarding Every service conntected to Gr√ºnes Netz needs to remove users when they are removed from `saml.gruene.de`. Connected services need to pull a list of users waiting for removal at least once a week. api.gruene.de needs to be informed whether the user did not exist or was removed. API tokens can be obtained from `technik@verdigado.com`.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Verdigado\Gruen eApiClient\models;

use \ArrayAccess;
use \Verdigado\Gruen eApiClient\ObjectSerializer;

/**
 * Poi Class Doc Comment
 *
 * @category Class
 * @package  Verdigado\Gruen eApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Poi implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Poi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coords' => 'float[]',
        'id' => 'string',
        'user_id' => 'string',
        'division_key' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'photos' => '\Verdigado\Gruen eApiClient\models\ImageSrcSet[]',
        'address' => '\Verdigado\Gruen eApiClient\models\PoiAddress',
        'type' => 'string',
        'poster' => '\Verdigado\Gruen eApiClient\models\PoiPoster',
        'flyer_spot' => '\Verdigado\Gruen eApiClient\models\PoiFlyerSpot',
        'house' => '\Verdigado\Gruen eApiClient\models\PoiHouse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'coords' => null,
        'id' => null,
        'user_id' => null,
        'division_key' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'photos' => null,
        'address' => null,
        'type' => null,
        'poster' => null,
        'flyer_spot' => null,
        'house' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'coords' => false,
		'id' => false,
		'user_id' => false,
		'division_key' => false,
		'created_at' => false,
		'updated_at' => false,
		'photos' => false,
		'address' => false,
		'type' => false,
		'poster' => false,
		'flyer_spot' => false,
		'house' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coords' => 'coords',
        'id' => 'id',
        'user_id' => 'userId',
        'division_key' => 'divisionKey',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'photos' => 'photos',
        'address' => 'address',
        'type' => 'type',
        'poster' => 'poster',
        'flyer_spot' => 'flyerSpot',
        'house' => 'house'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coords' => 'setCoords',
        'id' => 'setId',
        'user_id' => 'setUserId',
        'division_key' => 'setDivisionKey',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'photos' => 'setPhotos',
        'address' => 'setAddress',
        'type' => 'setType',
        'poster' => 'setPoster',
        'flyer_spot' => 'setFlyerSpot',
        'house' => 'setHouse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coords' => 'getCoords',
        'id' => 'getId',
        'user_id' => 'getUserId',
        'division_key' => 'getDivisionKey',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'photos' => 'getPhotos',
        'address' => 'getAddress',
        'type' => 'getType',
        'poster' => 'getPoster',
        'flyer_spot' => 'getFlyerSpot',
        'house' => 'getHouse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_FLYER_SPOT = 'FLYER_SPOT';
    public const TYPE_POSTER = 'POSTER';
    public const TYPE_HOUSE = 'HOUSE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FLYER_SPOT,
            self::TYPE_POSTER,
            self::TYPE_HOUSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('coords', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('division_key', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('photos', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('poster', $data ?? [], null);
        $this->setIfExists('flyer_spot', $data ?? [], null);
        $this->setIfExists('house', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['coords'] === null) {
            $invalidProperties[] = "'coords' can't be null";
        }
        if ((count($this->container['coords']) > 2)) {
            $invalidProperties[] = "invalid value for 'coords', number of items must be less than or equal to 2.";
        }

        if ((count($this->container['coords']) < 2)) {
            $invalidProperties[] = "invalid value for 'coords', number of items must be greater than or equal to 2.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['division_key'] === null) {
            $invalidProperties[] = "'division_key' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['photos'] === null) {
            $invalidProperties[] = "'photos' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coords
     *
     * @return float[]
     */
    public function getCoords()
    {
        return $this->container['coords'];
    }

    /**
     * Sets coords
     *
     * @param float[] $coords Coordinates represented in GeoJSON [longitude, latitude]
     *
     * @return self
     */
    public function setCoords($coords)
    {
        if (is_null($coords)) {
            throw new \InvalidArgumentException('non-nullable coords cannot be null');
        }

        if ((count($coords) > 2)) {
            throw new \InvalidArgumentException('invalid value for $coords when calling Poi., number of items must be less than or equal to 2.');
        }
        if ((count($coords) < 2)) {
            throw new \InvalidArgumentException('invalid length for $coords when calling Poi., number of items must be greater than or equal to 2.');
        }
        $this->container['coords'] = $coords;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets division_key
     *
     * @return string
     */
    public function getDivisionKey()
    {
        return $this->container['division_key'];
    }

    /**
     * Sets division_key
     *
     * @param string $division_key division_key
     *
     * @return self
     */
    public function setDivisionKey($division_key)
    {
        if (is_null($division_key)) {
            throw new \InvalidArgumentException('non-nullable division_key cannot be null');
        }
        $this->container['division_key'] = $division_key;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \Verdigado\Gruen eApiClient\models\ImageSrcSet[]
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \Verdigado\Gruen eApiClient\models\ImageSrcSet[] $photos photos
     *
     * @return self
     */
    public function setPhotos($photos)
    {
        if (is_null($photos)) {
            throw new \InvalidArgumentException('non-nullable photos cannot be null');
        }
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Verdigado\Gruen eApiClient\models\PoiAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Verdigado\Gruen eApiClient\models\PoiAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets poster
     *
     * @return \Verdigado\Gruen eApiClient\models\PoiPoster|null
     */
    public function getPoster()
    {
        return $this->container['poster'];
    }

    /**
     * Sets poster
     *
     * @param \Verdigado\Gruen eApiClient\models\PoiPoster|null $poster poster
     *
     * @return self
     */
    public function setPoster($poster)
    {
        if (is_null($poster)) {
            throw new \InvalidArgumentException('non-nullable poster cannot be null');
        }
        $this->container['poster'] = $poster;

        return $this;
    }

    /**
     * Gets flyer_spot
     *
     * @return \Verdigado\Gruen eApiClient\models\PoiFlyerSpot|null
     */
    public function getFlyerSpot()
    {
        return $this->container['flyer_spot'];
    }

    /**
     * Sets flyer_spot
     *
     * @param \Verdigado\Gruen eApiClient\models\PoiFlyerSpot|null $flyer_spot flyer_spot
     *
     * @return self
     */
    public function setFlyerSpot($flyer_spot)
    {
        if (is_null($flyer_spot)) {
            throw new \InvalidArgumentException('non-nullable flyer_spot cannot be null');
        }
        $this->container['flyer_spot'] = $flyer_spot;

        return $this;
    }

    /**
     * Gets house
     *
     * @return \Verdigado\Gruen eApiClient\models\PoiHouse|null
     */
    public function getHouse()
    {
        return $this->container['house'];
    }

    /**
     * Sets house
     *
     * @param \Verdigado\Gruen eApiClient\models\PoiHouse|null $house house
     *
     * @return self
     */
    public function setHouse($house)
    {
        if (is_null($house)) {
            throw new \InvalidArgumentException('non-nullable house cannot be null');
        }
        $this->container['house'] = $house;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


